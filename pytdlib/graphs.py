import cfgs

cfgs_count = 1816
CFGS = []
for i in range(0, cfgs_count+1):
    G = tuple()
    exec("G = (cfgs.V" + str(i) + ", cfgs.E" + str(i) + ")")
    CFGS.append(G)


#some graphs
V_P6 = [0,1,2,3,4,5]
E_P6 = [(0,1),(1,2),(2,3),(3,4),(4,5)]

V_K5 = [0,1,2,3,4]
E_K5 = [(0,1),(0,2),(0,3),(0,4),(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)]

V_Petersen = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
E_Petersen = [(0, 1), (0, 4), (0, 5), (1, 2), (1, 6), (2, 3), (2, 7), \
              (3, 4), (3, 8), (4, 9), (5, 7), (5, 8), (6, 8), (6, 9), (7, 9)]

V_Wagner = [0, 1, 2, 3, 4, 5, 6, 7]
E_Wagner = [(0, 1),(0, 4), (0, 7), (1, 2), (1, 5), (2, 3), (2, 6), (3, 4), \
            (3, 7), (4, 5), (5, 6), (6, 7)]

V_Pappus = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
E_Pappus = [(0, 1), (0, 5), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), \
            (3, 9), (4, 5), (4, 10), (5, 11), (6, 13), (6, 17), (7, 12), \
            (7, 14), (8, 13), (8, 15), (9, 14), (9, 16), (10, 15), (10, 17), \
            (11, 12), (11, 16), (12, 15), (13, 16), (14, 17)]

#corner cases
V_Empty = []
E_Empty = []

V_Edgeless = [1,2,3,4,5]
E_Edgeless = []


#random graphs
def randomGNP(n, p):
    import random
    V = []
    E = []
    for i in range(0, n):
        V.append(i)
        for j in range(i+1,n):
            if random.randint(0, 100) <= p*100:
                E.append((i, j))
    return V, E
